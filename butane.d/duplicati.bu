variant: fcos
version: 1.5.0
storage:
  directories:
    - path: "/opt/systemd/duplicati"
      mode: 0755
    - path: "/opt/systemd/duplicati/secrets"
      mode: 0750
  files:
    - path: "/opt/systemd/duplicati/secrets/duplicati_admin_passwd.secret"
      mode: 0440
      contents:
        local: files/duplicati_admin_passwd.secret
      user:
        name: root
      group:
        name: container-group-1001
    - path: "/opt/systemd/duplicati/secrets/backups_objectstore_s3_access_key_id.secret"
      mode: 0440
      contents:
        local: files/backups_objectstore_s3_access_key_id.secret
      user:
        name: root
      group:
        name: container-group-1001
    - path: "/opt/systemd/duplicati/secrets/backups_objectstore_s3_secret_access_key.secret"
      mode: 0440
      contents:
        local: files/backups_objectstore_s3_secret_access_key.secret
      user:
        name: root
      group:
        name: container-group-1001
    - path: "/opt/systemd/duplicati/.env"
      mode: 0644
      contents:
        local: files/duplicati.env
    - path: "/opt/systemd/duplicati/docker-compose.yml"
      mode: 0644
      contents:
        inline: |-
          version: '3.9'
          services:
            backupstore:
              image: efrecon/s3fs:1.94
              container_name: backups-s3fs
              cap_add:
                - SYS_ADMIN
              security_opt:
                - label=disable
              devices:
                - "/dev/fuse:/dev/fuse:rwm,z"
              volumes:
                - "/opt/data/backups:/opt/s3fs/bucket:rw,z,rshared"
              secrets:
                - source: backups_objectstore_s3_access_key_id
                  target: storage-access-key.id
                  uid: "0"
                  gid: "${CONTAINER_GROUP_ID}"
                  mode: 0440
                - source: backups_objectstore_s3_secret_access_key
                  target: storage-secret-access.key
                  uid: "0"
                  gid: "${CONTAINER_GROUP_ID}"
                  mode: 0440
              environment:
                - "TZ=${TZ}"
                - "UID=${CONTAINER_USER_ID}"
                - "GID=${CONTAINER_GROUP_ID}"
                - "AWS_S3_URL=${OBJECTSTORE_S3_URL}"
                - "AWS_S3_BUCKET=${OBJECTSTORE_S3_BUCKET}"
                - "AWS_S3_ACCESS_KEY_ID_FILE=/run/secrets/storage-access-key.id"
                - "AWS_S3_SECRET_ACCESS_KEY_FILE=/run/secrets/storage-secret-access.key"
                - "AWS_S3_AUTHFILE=${OBJECTSTORE_S3_AUTHFILE}"
                - "AWS_S3_MOUNT=/opt/s3fs/bucket"
                - "S3FS_ARGS=allow_root"
                - "S3FS_DEBUG=0"
              restart: unless-stopped
            duplicati:
              image: lscr.io/linuxserver/duplicati:latest
              container_name: duplicati
              hostname: backup.${SERVER_DOMAIN_NAME}
              depends_on:
                backupstore:
                  condition: service_healthy
              security_opt:
                - no-new-privileges
                - label=disable
              volumes:
                - "config:/config"
                - "/opt/data/backups:/source:ro,z,rshared"
              secrets:
                - source: duplicati_admin_passwd
                  target: admin_pwd
                  uid: "0"
                  gid: "${CONTAINER_GROUP_ID}"
                  mode: 0440
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.duplicati.service=duplicati"
                - "traefik.http.routers.duplicati.rule=Host(`backup.${SERVER_DOMAIN_NAME}`)"
                - "traefik.http.routers.duplicati.entrypoints=websecure"
                - "traefik.http.routers.duplicati.tls.certresolver=letsencryptresolver"
                - "traefik.http.services.duplicati.loadbalancer.server.port=8200"
              environment:
                - "TZ=${TZ}"
                - "PUID=${CONTAINER_USER_ID}"
                - "PGID=${CONTAINER_GROUP_ID}"
                - "CLI_ARGS='--webservice-interface=loopback'"
                - "FILE__PASSWORD=/run/secrets/admin_pwd"
              networks:
                - traefik
              restart: unless-stopped
          volumes:
            config:
              external: false
          networks:
            traefik:
              name: backend
              external: true
          secrets:
            duplicati_admin_passwd:
              file: "./secrets/duplicati_admin_passwd.secret"
            backups_objectstore_s3_access_key_id:
              file: "./secrets/backups_objectstore_s3_access_key_id.secret"
            backups_objectstore_s3_secret_access_key:
              file: "./secrets/backups_objectstore_s3_secret_access_key.secret"
  links:
    - path: /opt/systemd/duplicati/docker-compose-backup.sh
      target: /usr/local/bin/docker-compose-backup.sh
systemd:
  units:
    - name: docker.duplicati.service
      enabled: true
      contents: |-
        [Unit]
        Description=Duplicati Backup Container
        After=network-online.target docker.service docker.traefik.service
        Requires=network.target network-online.target docker.service docker.traefik.service
        
        [Service]
        Type=oneshot
        TimeoutStartSec=0
        RemainAfterExit=true
        EnvironmentFile=-/etc/sysconfig/coreos.env
        WorkingDirectory=/opt/systemd/duplicati/
        ExecStartPre=-/usr/bin/docker compose down
        ExecStartPre=-/usr/bin/docker compose rm
        ExecStartPre=-/usr/bin/docker compose pull
        ExecStart=/usr/bin/docker compose up -d
        ExecStop=/usr/bin/docker compose down
        
        [Install]
        WantedBy=multi-user.target
    - name: backup.docker.duplicati.service
      enabled: true
      contents: |-
        [Unit]
        Description=Backup Duplicati Backup Container
        After=docker.duplicati.service
        Requires=docker.duplicati.service
  
        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/sysconfig/coreos.env
        WorkingDirectory=/opt/systemd/duplicati/
        ExecStart=/opt/systemd/duplicati/docker-compose-backup.sh
  
        [Install]
        WantedBy=backup.docker.duplicati.timer
    - name: backup.docker.duplicati.timer
      enabled: true
      contents: |-
        [Unit]
        Description=Backup Duplicati Backup Container at 01:00 daily
  
        [Timer]
        OnCalendar=*-*-* 01:00:00
  
        [Install]
        WantedBy=timers.target
